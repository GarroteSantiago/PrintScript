@startuml
'https://plantuml.com/class-diagram

interface ASTreeComponent{
    + Response addChild(ASTreeNodeInterface newChildren)
    + Response removeChild(ASTreeNodeInterface oldChildren)
    + Response getChild(Integer index)
    + Response accept(VisitorInterface visitor)
}
abstract class ASTreeComposite implements ASTreeComponent{
    + Response addChild(ASTreeNodeInterface newChildren)
    + Response removeChild(ASTreeNodeInterface oldChildren)
    + Response getChild(Integer index)
    + Response accept(VisitorInterface visitor)
}
abstract class ASTreeLeaf implements ASTreeComponent{
    + Response addChild(ASTreeNodeInterface newChildren)
    + Response removeChild(ASTreeNodeInterface oldChildren)
    + Response getChild(Integer index)
    + Response accept(VisitorInterface visitor)
}

class AssignationExpressionNode extends ASTreeComposite{
    + TokenInterface value
    + TreeInterface<TokenInterface> leftChild
    + TreeInterface<TokenInterface> rightChild
}
class AdditionExpressionNode extends ASTreeComposite{
    + TokenInterface value
    + TreeInterface<TokenInterface> leftChild
    + TreeInterface<TokenInterface> rightChild
}
class MultiplicationExpressionNode extends ASTreeComposite{
    + TokenInterface value
    + TreeInterface<TokenInterface> leftChild
    + TreeInterface<TokenInterface> rightChild
}

class LiteralExpressionNode extends ASTreeLeaf{
    + TokenInterface value
    + TreeInterface<TokenInterface> leftChild
    + TreeInterface<TokenInterface> rightChild
}
class TypeExpressionNode extends ASTreeLeaf{
    + TokenInterface value
    + TreeInterface<TokenInterface> leftChild
    + TreeInterface<TokenInterface> rightChild
}
class IdentifierExpressionNode extends ASTreeLeaf{
    + TokenInterface value
    + TreeInterface<TokenInterface> leftChild
    + TreeInterface<TokenInterface> rightChild
}

ASTreeComponent ..* ASTreeComposite: children


@enduml